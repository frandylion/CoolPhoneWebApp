Front Office:
1.  Admin View
   1. Button on home page that allows access to users 
   2. Transaction:
      1. Given: user_id
      2. Return: true if user is admin, false otherwise (just return the users admin value)
2. Add a table for bills
   1. bill: (bill_id, user_id, cost, due date, paid(true/false))
   2. Due balance is determined by unpaid bills
   3. Pressing pay balance updates all unpaid bills to paid and generates several transactions with one transaction_id
   4. Change transaction to just be a button paying all unpaid bills
   5. Transaction primary key (transaction_id, bill_id)
   6. EDIT TRANSACTION TABLE: (bill_id, date_paid) 
      1. Other values like cost can be derived from the bill
   7. Transaction:
      1. Given: user_id
      2. Return: all bills for that user (bill_id, cost, date, paid) (don’t return user_id)
3. Due balance
   1. Derived from the users unpaid bills
   2. Displayed as a value above the transaction table
   3. Transaction:
      1. Given: user_id
      2. Return: total sum cost of all unpaid bills
   4. Add button to pay balance
      1. Change it to pay in whole
   5. Transaction: 
      1. Given: user_id
      2. Return: generate a transaction for each unpaid bill, set all bills to paid
   6. Calculate bill cost based on (minutes*cost of call_type minutes) + plan_type cost
4. Transaction table
   1. Display all of a users transactions in a table on the home page
   2. Derived from transaction and bill tables
   3. Transaction: 
      1. Given: user_id
      2. Return: all of the transactions of that user (bill_id, date_paid, due_date, cost) (due_date and cost from the bill with bill_id, don’t return user_id)
5. Call log table
   1. Display all of the users calls and their individual cost
   2. Derived from call_log and call_type
   3. Transaction:
      1. Given: user_id
      2. Return: all of the calls from that user (call_id, date, duration, type_name, cost) (cost is from cost_per_minute in call_type * duration in the call_log)


Back Office:
6. User Query
   1. Search bar 
   2. Transaction:
      1. Given: some string
      2. Return: all users that contain the given string in their username showing the following attributes: (username, password, plan type, total call minutes)
   3. Option to deactivate the user by pressing a button on the table (in the admin panel of the website) (ask for confirmation)
   4. EDIT USER TABLE: add active (bool) attribute, inactive users cannot login
   5. Transaction: 
      1. Given: user_id
      2. Return: update user active attribute to false
   6. Option to reactivate deactivated user by pressing button on the table (in the admin panel of the website) (ask for confirmation)
   7. Transaction:
      1. Given: user_id
      2. Return: update user active attribute to true
7. Revenue report
   1. Not a table but derived from transactions and bills
   2. Transaction:
      1. Given: NA
      2. Return: the following values:
         1. Total revenue (derived from total cost of all paid bills)
         2. Average revenue per user (derived from all paid bills, cost grouped (summed) by user and averaged)
         3. Outstanding bills (derived from the total costs of all unpaid bills)
8. Calls report
   1. Not a table but derived from call_log
   2. Transaction:
      1. Given: NA
      2. Return: the following values:
         1. Total call minutes
         2. Percentage minutes by call_type
         3. Average call_duration (average minutes per entry in call_log)


Simulation:
        Initial:
9. Simulate button
   1. Button on login page
   2. Runs database.sql and phone.sql
        
        Admin:
10.  Set month
   1. Generate data log for each user that month based 
   2. Next month button
11.  Add 1 random user
   1. Button on admin page
   2. Random generate values in JS
   3. Transaction:
      1. Given: each value in a users row
      2. Return: insert a new user in users
12.  Add 100 random users
   1. Button on admin page
   2. Same transaction as 1 user but looped in JS 100 times
13.  Add 100 calls
   1. Button on admin page
   2. Randomly generate values for call within the current set month
   3. Transaction: 
      1. Given: values for a call_log entry and month
      2. Return: insert them in the call_log
      3. Fails: If user is prepaid and the new call duration would go over the call_limit_min for the month, rollback the transaction and end it. Get current call minutes from all the calls in the given month
14.  Pay all bills button


Other:
15.  Phone Model
   1. Add phone model table with types of phones offered
   2. Add phone model to user
   3. Display users phone model on the home page
16.  Edit bank
   1. (maybe) (frances argues to) remove bank balance
   2. Add bank name
    


Links:
https://www.sqlshack.com/transactions-in-sql-server-for-beginners/
https://node-postgres.com/features/transactions